name: "Publish Libations Book"

on:
  push:
#    paths:
#    - 'Recipes/**.rst'

env:
  WF_PARAM_PDF_SOURCE_RST: Libations.rst
  WF_PARAM_HTML_SOURCE_RST: Libations.html.rst
  WF_PARAM_PUBLISHED_PDF: Libations.pdf
  WF_PARAM_PUBLISHED_HTML: Libations.html
  WF_PARAM_PUBLISHED_EPUB: Libations.epub
  WF_PARAM_PUBLISHED_WWW: Libations.www.tar
  WF_REVISION_MAJOR_NUMBER_FILE: revnum_major.txt
  WF_REVISION_MINOR_NUMBER_FILE: revnum_minor.txt

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug - Dump env
        run: env | sort

      - name: Debug - Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

  set_release_number:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get latest release
        id: last_release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ github.token }}
          view_top: 1

      - name: Build Revision Number Files
        run: |
          RAW_TAG="${{ steps.last_release.outputs.tag_name }}"
          VERSION_TAG="${RAW_TAG:1}"
          IFS='.'
          read -ra VERSION_PART <<< "$VERSION_TAG"
          echo "${VERSION_PART[0]}" > ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}
          echo "${VERSION_PART[1]}" > ${{ env.WF_REVISION_MINOR_NUMBER_FILE }}

      - name: Debug - Previous Version Number
        run: echo "Previous Document Version - v$(cat ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}).$(cat ${{ env.WF_REVISION_MINOR_NUMBER_FILE }})"

      - name: Increment minor revision
        run: |
          if ! test -f ${{ env.WF_REVISION_MINOR_NUMBER_FILE }}; then
            echo 0 > ${{ env.WF_REVISION_MINOR_NUMBER_FILE }}
          else
            echo $(($(cat ${{ env.WF_REVISION_MINOR_NUMBER_FILE }}) + 1)) > ${{ env.WF_REVISION_MINOR_NUMBER_FILE }}
          fi

      - name: Debug - New Version Number
        run: echo "New Document Version - v$(cat ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}).$(cat ${{ env.WF_REVISION_MINOR_NUMBER_FILE }})"

      - name: Save revision file artifacts
        uses: actions/upload-artifact@v2
        with:
          name: revision-numbers
          path: |
            ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}
            ${{ env.WF_REVISION_MINOR_NUMBER_FILE }}
          if-no-files-found: error

  build_substitution:
    needs: set_release_number

    runs-on: ubuntu-latest

    env:
      TEMP_SUBSTITUTION_FILE: temp_substitutions.rst

    steps:
    - name: Download Revision Number File artifacts
      id: getRevNums
      uses: actions/download-artifact@v2
      with:
        name: revision-numbers

    - name: Update revision and build temp substitution file
      run: |
        echo ".. |Date| replace:: $(date +%B\ %d\,\ %Y)"  > $TEMP_SUBSTITUTION_FILE
        echo "  "  >> $TEMP_SUBSTITUTION_FILE
        echo ".. |Revision| replace:: $(cat ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}).$(cat ${{ env.WF_REVISION_MINOR_NUMBER_FILE }})" >> $TEMP_SUBSTITUTION_FILE
        echo "  " >> $TEMP_SUBSTITUTION_FILE

    - name: Debug - Version Number
      run: echo "New Document Version - v$(cat ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}).$(cat ${{ env.WF_REVISION_MINOR_NUMBER_FILE }})"

    - name: Save revision file artifacts
      uses: actions/upload-artifact@v2
      with:
        name: substitution-file
        path: |
          ${{ env.TEMP_SUBSTITUTION_FILE }}
        if-no-files-found: error

  build_pdf:
    needs: build_substitution

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install apt dependencies
      run: |
        sudo apt-get update && sudo apt-get -y install plantuml libxml2-dev libxslt-dev python3-dev

    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade rst2pdf 

    - name: Download Revision Number File artifacts
      id: getRevNums
      uses: actions/download-artifact@v2
      with:
        name: substitution-file

    - name: Build pdf
      run: |
        rm -fR *.build_temp
        rst2pdf ${{ env.WF_PARAM_PDF_SOURCE_RST }} \
          --break-level=1 \
          --section-header-depth=1 \
          --fit-background-mode=scale \
          --smart-quotes=0 \
          --fit-literal-mode=shrink \
          --repeat-table-rows \
          --stylesheets=Cookbook.style \
          --output="${{ env.WF_PARAM_PUBLISHED_PDF }}" \
          --strip-elements-with-class=handout \
          --extension-module=preprocess
        rm -fR *.build_temp

    - name: Save Published files
      uses: actions/upload-artifact@v2
      with:
        name: published-files
        path: |
          ${{ env.WF_PARAM_PUBLISHED_PDF }}
        if-no-files-found: error

  build_html:
    needs: build_substitution

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install apt dependencies
      run: |
        sudo apt-get update && sudo apt-get -y install plantuml libxml2-dev libxslt-dev python3-dev

    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade rst2html5

    - name: Download Revision Number File artifacts
      id: getRevNums
      uses: actions/download-artifact@v2
      with:
        name: substitution-file

    - name: Build html
      run: |
        rst2html5 \
            --stylesheet-inline=Cookbook.css \
            --strip-elements-with-class=handout \
            --strip-comments \
            ${{ env.WF_PARAM_HTML_SOURCE_RST  }} \
            "${{ env.WF_PARAM_PUBLISHED_HTML }}"
        rm -fR *.build_temp

    - name: Save Published files
      uses: actions/upload-artifact@v2
      with:
        name: published-files
        path: |
          ${{ env.WF_PARAM_PUBLISHED_HTML }}
        if-no-files-found: error

  build_epub:
    needs: build_html

    runs-on: ubuntu-latest

    steps:

    - name: Install Calabre
      run: |
        sudo apt-get update && sudo apt-get -y install calibre

    - uses: actions/checkout@v2

    - name: Download latest output files.
      uses: actions/download-artifact@v2
      with:
        name: published-files

    - name: Build epub
      run: |
        ebook-convert "${{ env.WF_PARAM_PUBLISHED_HTML }}" "${{ env.WF_PARAM_PUBLISHED_EPUB }}" \
          --title "The Messy Chef Makes Drinks" \
          --authors "Rodney Shupe" \
          --author-sort "Shupe Rodney" \
          --language English \
          --comments "A collection of Cocktails and Other Libations" \
          --tags Cocktails,Libations,Recipes \
          --cover Cover.png \
          --max-toc-links 29 \
          --embed-all-fonts > /dev/null

    - name: Save Published files
      uses: actions/upload-artifact@v2
      with:
        name: published-files
        path: |
          ${{ env.WF_PARAM_PUBLISHED_EPUB }}
        if-no-files-found: error

  build_website:
    needs: build_html
    runs-on: ubuntu-latest
    steps:

    - name: Setup Environment
      run: |
        sudo apt-get update && sudo apt-get install html-xml-utils htmldoc
        mkdir www

    - name: Set some Environment Variables.
      run: |
        PUBLISHED_FILE="${{ env.WF_PARAM_PUBLISHED_HTML }}"
        #echo "OUT_DIR=www/${PUBLISHED_FILE%.html}" >> $GITHUB_ENV
        echo "OUT_DIR=www" >> $GITHUB_ENV

    - name: Download latest output files.
      uses: actions/download-artifact@v2
      with:
        name: published-files

    - name: Strip TOC
      run: |
        cat "${{ env.WF_PARAM_PUBLISHED_HTML }}" | hxremove 'aside' > "Stripped_${{ env.WF_PARAM_PUBLISHED_HTML }}"

    - name: Split Published HTML into multiple files.
      run: |
        rm --recursive --force "${{ env.OUT_DIR }}"
        mkdir --parents "${{ env.OUT_DIR }}"
        htmldoc --format htmlsep \
            --outdir "${{ env.OUT_DIR }}" \
            --headfootfont sans \
            --no-title \
            --toclevels 2 \
            --toctitle "Contents" \
            --quiet \
            "Stripped_${{ env.WF_PARAM_PUBLISHED_HTML }}"

    - name: Breakout individual directories.
      run: |
        START_DIR="${PWD}"
        cd "${{ env.OUT_DIR }}"
        HREFS="$(cat index.html \
          | hxnormalize -x \
          | grep --ignore-case '<a HREF="' \
          | grep --no-messages --invert-match --ignore-case '.html#1">' \
          | sed 's/.*<li><a href="//gi' \
          | sed 's/".*//g' \
          | tr '\n' ' ')"
        for HREF in ${HREFS}; do
            HTML_FILE=$(echo ${HREF} | cut -d'#' -f 1)
            if test -f ${HTML_FILE}; then
                FILE=$(basename ${HTML_FILE})
                DIR_NAME="${FILE%.html}"
                echo "DEBUG: Test Title"
                cat ${HTML_FILE} \
                  | hxnormalize -x \
                  | grep --ignore-case '<h2>.*<a> HREF="' \
                  | sed 's/<h2>.*<a[^>]*>//gi' \
                  | sed 's/<\/a>.*<\/h2>//gi'
                TITLE="$(cat ${HTML_FILE} \
                  | hxnormalize -x \
                  | grep --ignore-case '<h2>.*<a> HREF="' \
                  | sed 's/<h2>.*<a[^>]*>//gi' \
                  | sed 's/<\/a>.*<\/h2>//gi' \
                  )"
                echo "processing ${HTML_FILE} (${TITLE}) into ${DIR_NAME}"
                cat ${HTML_FILE} \
                    | hxnormalize -x \
                    | hxremove -i hr \
                    | grep --no-messages --invert-match '<p><a' \
                    | grep --no-messages --invert-match '<p style="page-break-before: always">' \
                    | hxnormalize -x \
                    > temp.html
                rm --recursive --force ${DIR_NAME}
                mkdir --parents ${DIR_NAME}
                htmldoc --format htmlsep \
                    --outdir ${DIR_NAME} \
                    --no-title \
                    --toclevels 3 \
                    --toctitle "${TITLE}" \
                    --quiet \
                    temp.html
                #rm ${DIR_NAME}/${HTML_FILE}
                rm ${HTML_FILE}
                sed --in-place "s/${HREF}/${DIR_NAME}\/index.html/" index.html
            else
                echo "Unable to process ${HTML_FILE}"
            fi
        done;
        cd "${START_DIR}"

    - name: Bundle into tar file.
      run: |
        tar --create --file="${{ env.WF_PARAM_PUBLISHED_WWW }}" www

    - name: Save Published files
      uses: actions/upload-artifact@v2
      with:
        name: published-files
        path: |
          ${{ env.WF_PARAM_PUBLISHED_WWW }}
        if-no-files-found: error

  upload_website:
    needs: build_website
    runs-on: ubuntu-latest
    steps:

    - name: Download latest output files.
      uses: actions/download-artifact@v2
      with:
        name: published-files

    - name: Push Website to GDrive.
      uses: wei/rclone@v1
      env:
        RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
      with:
        args: copy ${{ env.WF_PARAM_PUBLISHED_WWW }} gdrive:Cooking

  upload_release:
    needs: [build_pdf, build_epub, build_website]
    runs-on: ubuntu-latest
    steps:

    - name: Download latest output files.
      uses: actions/download-artifact@v2
      with:
        name: published-files

    - name: Download Revision Number File artifacts
      id: getRevNums
      uses: actions/download-artifact@v2
      with:
        name: revision-numbers

    - name: Build new tag version
      run: |
        echo "PUBLISHED_DOCUMENT_VERSION=$(cat ${{ env.WF_REVISION_MAJOR_NUMBER_FILE }}).$(cat ${{ env.WF_REVISION_MINOR_NUMBER_FILE }})" >> $GITHUB_ENV
        echo "Create Tag - ${{ env.PUBLISHED_DOCUMENT_VERSION }}"

    - name: Tag and Release
      uses: jasondavis303/tag-and-release-and-upload@v1.2.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        version: v${{ env.PUBLISHED_DOCUMENT_VERSION }}
        assets: '[ "${{ env.WF_PARAM_PUBLISHED_PDF }}", "${{ env.WF_PARAM_PUBLISHED_EPUB }}", "${{ env.WF_PARAM_PUBLISHED_WWW }}" ]'
        overwrite: false

  publish_to_google:
    needs: [build_pdf, build_epub]
    runs-on: ubuntu-latest
    steps:

    - name: Download latest output files.
      uses: actions/download-artifact@v2
      with:
        name: published-files

    - name: Push PDF to GDrive.
      uses: wei/rclone@v1
      env:
        RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
      with:
        args: copy ${{ env.WF_PARAM_PUBLISHED_PDF }} gdrive:Cooking

    - name: Push HTML to GDrive.
      uses: wei/rclone@v1
      env:
        RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
      with:
        args: copy ${{ env.WF_PARAM_PUBLISHED_HTML }} gdrive:Cooking

    - name: Push EPUB to GDrive.
      uses: wei/rclone@v1
      env:
        RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
      with:
        args: copy ${{ env.WF_PARAM_PUBLISHED_EPUB }} gdrive:Cooking

  #backup-via-ssh:
  #  needs: [build_pdf, build_epub, build_website]
  #  runs-on: ubuntu-latest
  #
  #  steps:
  #  - name: Download latest putput files.
  #    uses: actions/download-artifact@v2
  #    with:
  #      name: published-files
  #
  #  - name: Upload via SSH
  #    uses: appleboy/scp-action@master
  #    with:
  #      host: ${{ secrets.SSH_VPS_HOST }}
  #      username: ${{ secrets.SSH_VPS_USERNAME }}
  #      port: ${{ secrets.SSH_VPS_PORT }}
  #      key: ${{ secrets.SSH_VPS_KEY }}
  #      source: "*"
  #      target: "Cooking"
  #      overwrite: true
